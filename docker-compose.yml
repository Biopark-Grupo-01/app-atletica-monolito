version: '3.8'

services:
  monolith:
    build:
      context: ./monolith
      dockerfile: Dockerfile
    ports:
      - '3001:3001'
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - PORT=3001
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=${DATABASE_USER:-postgres}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD:-postgres123}
      - DATABASE_NAME=${DATABASE_NAME:-atletica}
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  ticket-service:
    build:
      context: ./ticket-service
      dockerfile: Dockerfile
    ports:
      - '3002:3002'
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=3002
      - DATABASE_HOST=ticket-postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=${DATABASE_USER:-postgres}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD:-postgres123}
      - DATABASE_NAME=${DATABASE_NAME_TICKET:-ticket_service}
      - MONOLITH_SERVICE_URL=http://monolith:3001
    restart: unless-stopped
    depends_on:
      ticket-postgres:
        condition: service_healthy
    networks:
      - app-network

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD:-postgres123}
      - POSTGRES_USER=${DATABASE_USER:-postgres}
      - POSTGRES_DB=${DATABASE_NAME:-atletica}
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DATABASE_USER:-postgres}']
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

  ticket-postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD:-postgres123}
      - POSTGRES_USER=${DATABASE_USER:-postgres}
      - POSTGRES_DB=${DATABASE_NAME_TICKET:-ticket_service}
    ports:
      - '5433:5432'
    volumes:
      - ticket_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DATABASE_USER:-postgres}']
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

  # SonarQube services
  sonarqube:
    image: sonarqube:lts
    ports:
      - "9000:9000"
    environment:
      - SONAR_JDBC_URL=jdbc:postgresql://sonarqube-db:5432/sonar
      - SONAR_JDBC_USERNAME=sonar
      - SONAR_JDBC_PASSWORD=sonar
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_extensions:/opt/sonarqube/extensions
    networks:
      - app-network
    depends_on:
      - sonarqube-db
    restart: unless-stopped

  sonarqube-db:
    image: postgres:13
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
      - POSTGRES_DB=sonar
    volumes:
      - sonarqube_db:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  ticket_postgres_data:
  sonarqube_data:
  sonarqube_logs:
  sonarqube_extensions:
  sonarqube_db: