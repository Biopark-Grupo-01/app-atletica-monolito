version: '3'

services:
  monolith:
    build:
      context: ./monolith
      dockerfile: Dockerfile
    ports:
      - '3001:3001'
    env_file:
      - ./monolith/.env
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - PORT=3001
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=${DATABASE_USER:-postgres}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD:-postgres123}
      - DATABASE_NAME=${DATABASE_NAME:-atletica}
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network

  ticket-service:
    build:
      context: ./ticket-service
      dockerfile: Dockerfile
    ports:
      - '3002:3002'
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=3002
      - DATABASE_HOST=ticket-postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=${DATABASE_USER:-postgres}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD:-postgres123}
      - DATABASE_NAME=${DATABASE_NAME_TICKET:-ticket_service}
      - MONOLITH_SERVICE_URL=http://monolith:3001
    restart: unless-stopped
    depends_on:
      ticket-postgres:
        condition: service_healthy
    networks:
      - app-network

  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    ports:
      - '3003:3003'
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=3003
      - DATABASE_HOST=notification-postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=${DATABASE_USER:-postgres}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD:-postgres123}
      - DATABASE_NAME=${DATABASE_NAME_NOTIFICATION:-notification_service}
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - RABBITMQ_QUEUE=notifications_queue
    restart: unless-stopped
    depends_on:
      notification-postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD:-postgres123}
      - POSTGRES_USER=${DATABASE_USER:-postgres}
      - POSTGRES_DB=${DATABASE_NAME:-atletica}
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DATABASE_USER:-postgres}']
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

  ticket-postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD:-postgres123}
      - POSTGRES_USER=${DATABASE_USER:-postgres}
      - POSTGRES_DB=${DATABASE_NAME_TICKET:-ticket_service}
    ports:
      - '5433:5432'
    volumes:
      - ticket_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DATABASE_USER:-postgres}']
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

  notification-postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD:-postgres123}
      - POSTGRES_USER=${DATABASE_USER:-postgres}
      - POSTGRES_DB=${DATABASE_NAME_NOTIFICATION:-notification_service}
    ports:
      - '5434:5432'
    volumes:
      - notification_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DATABASE_USER:-postgres}']
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672" # AMQP protocol
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  ticket_postgres_data:
  notification_postgres_data:
  rabbitmq_data: